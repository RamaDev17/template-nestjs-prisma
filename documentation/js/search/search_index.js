var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.399,1,1.928]],["body/controllers/AppController.html",[0,2.172,1,2.992,2,1.71,3,0.439,4,0.378,5,0.378,6,3.099,7,0.639,8,1.792,9,4.551,10,1.71,11,0.036,12,0.876,13,3.745,14,1.411,15,1.971,16,0.722,17,0.876,18,2.639,19,3.099,20,0.439,21,0.061,22,2.674,23,2.674,24,1.552,25,3.745,26,0.028,27,0.028]],["title/modules/AppModule.html",[28,1.155,29,1.928]],["body/modules/AppModule.html",[1,2.833,2,1.781,3,0.326,4,0.281,5,0.281,11,0.037,16,0.847,17,0.652,18,2.689,19,2.304,20,0.326,21,0.045,26,0.023,27,0.023,28,1.697,29,3.687,30,1.271,31,1.271,32,1.563,33,1.563,34,1.271,35,2.528,36,1.563,37,2.304,38,2.304,39,2.304,40,2.99,41,2.432,42,2.99,43,2.19,44,1.563,45,1.563,46,2.784,47,2.785,48,2.784,49,2.784,50,2.784,51,2.784,52,2.784,53,2.304,54,2.304,55,2.304,56,1.988,57,2.784,58,2.784,59,2.784,60,2.784]],["title/injectables/AppService.html",[18,1.547,61,0.871]],["body/injectables/AppService.html",[3,0.461,4,0.398,5,0.398,7,0.671,8,1.849,9,4.633,11,0.036,12,0.921,14,1.483,15,2.034,16,0.597,17,0.921,18,2.478,20,0.461,21,0.064,24,1.631,26,0.029,27,0.029,61,1.395,62,1.988,63,3.258,64,3.936,65,3.936,66,3.936,67,3.936]],["title/classes/Auth.html",[21,0.05,68,1.928]],["body/classes/Auth.html",[3,0.532,4,0.459,5,0.459,11,0.033,20,0.532,21,0.074,26,0.031,27,0.031,68,3.366,69,1.711,70,3.757]],["title/controllers/AuthController.html",[0,1.399,71,1.928]],["body/controllers/AuthController.html",[0,0.796,2,0.796,3,0.204,4,0.176,5,0.491,7,0.297,8,1.037,10,1.767,11,0.037,12,0.906,14,1.458,16,0.711,17,0.408,20,0.204,21,0.028,22,1.245,23,1.245,24,1.745,26,0.016,27,0.016,56,1.245,68,1.097,71,1.731,72,1.443,73,1.443,74,2.277,75,2.26,76,2.82,77,2.277,78,2.82,79,1.744,80,2.043,81,1.744,82,1.744,83,1.767,84,1.099,85,0.906,86,1.767,87,1.744,88,1.744,89,1.744,90,4.018,91,1.545,92,1.744,93,2.043,94,1.744,95,1.744,96,1.744,97,2.434,98,1.767,99,3.408,100,1.744,101,1.744,102,1.744,103,1.443,104,2.277,105,1.744,106,1.443,107,2.752,108,2.752,109,1.744,110,1.744,111,1.721,112,1.443,113,1.443,114,1.443,115,0.979,116,1.744,117,1.744,118,1.443,119,1.443,120,2.752,121,1.744,122,1.744,123,1.744,124,1.744,125,1.744,126,1.744,127,1.744,128,1.744,129,1.744,130,1.744,131,1.744,132,2.277,133,1.744,134,1.744,135,1.545,136,1.744,137,1.744,138,1.744,139,1.744,140,1.744,141,1.744,142,1.744,143,2.752,144,2.649,145,1.744,146,1.744,147,1.744,148,1.744,149,2.752,150,1.744,151,2.752,152,1.744,153,1.744,154,1.744,155,1.744,156,1.744,157,1.744,158,1.744,159,1.744,160,1.245,161,1.245,162,3.408,163,1.744,164,1.744,165,2.752,166,1.744,167,1.097,168,0.979,169,1.744,170,1.744,171,1.744,172,1.744,173,1.744]],["title/classes/AuthGuard.html",[21,0.05,115,1.72]],["body/classes/AuthGuard.html",[3,0.372,4,0.321,5,0.321,7,0.541,8,1.608,11,0.036,12,0.999,14,1.608,16,0.648,17,0.743,20,0.372,21,0.051,24,1.769,26,0.025,27,0.025,61,0.902,69,1.196,83,1.949,84,1.213,85,0.743,86,1.949,115,2.707,167,1.997,168,1.782,174,2.627,175,2.685,176,4.269,177,4.269,178,4.269,179,4.269,180,5.158,181,3.174,182,3.174,183,4.269,184,3.386,185,3.174,186,4.823,187,4.269,188,3.174,189,1.997,190,3.174]],["title/modules/AuthModule.html",[28,1.155,40,1.72]],["body/modules/AuthModule.html",[2,1.79,3,0.328,4,0.283,5,0.283,11,0.036,16,0.832,17,0.656,20,0.328,21,0.045,26,0.023,27,0.023,28,1.704,30,1.28,31,1.28,32,1.574,33,1.574,34,1.28,35,2.538,36,1.574,40,3.23,41,2.438,43,2.201,44,1.574,45,1.574,47,2.799,71,2.844,111,2.695,112,2.321,160,2.002,184,1.764,189,1.764,191,2.321,192,2.804,193,2.321,194,2.997,195,2.804,196,2.804,197,2.321,198,2.804,199,2.804,200,2.002,201,2.467,202,2.321,203,2.804,204,2.804,205,2.804,206,2.804,207,2.804,208,2.804,209,2.321,210,2.804,211,2.804,212,2.804]],["title/injectables/AuthService.html",[61,0.871,111,1.547]],["body/injectables/AuthService.html",[3,0.158,4,0.136,5,0.425,7,0.229,8,0.84,11,0.037,12,0.862,14,1.252,16,0.603,17,0.315,20,0.158,21,0.022,24,1.377,26,0.013,27,0.013,56,0.96,61,0.634,62,0.679,74,2.363,75,2.492,76,2.75,77,1.845,78,1.845,80,1.517,83,1.682,84,1.195,85,0.862,86,1.682,91,1.865,93,1.517,97,3.164,98,1.517,111,1.126,113,1.113,114,1.113,135,2.563,144,2.872,161,3.65,167,2.498,168,2.229,184,2.769,200,0.96,201,1.797,213,1.113,214,1.592,215,1.113,216,1.517,217,3.323,218,1.345,219,1.845,220,2.23,221,1.345,222,2.23,223,2.498,224,1.345,225,3.684,226,2.23,227,1.345,228,2.23,229,1.345,230,1.345,231,1.345,232,1.113,233,1.845,234,2.23,235,1.845,236,2.23,237,2.23,238,1.86,239,2.23,240,1.345,241,1.345,242,1.345,243,1.345,244,1.345,245,1.345,246,1.345,247,2.23,248,1.345,249,2.75,250,1.113,251,2.75,252,1.113,253,2.75,254,2.23,255,2.23,256,2.856,257,2.23,258,1.345,259,1.345,260,1.113,261,1.345,262,1.345,263,1.345,264,2.363,265,1.345,266,1.345,267,2.23,268,2.068,269,1.845,270,1.403,271,1.797,272,1.845,273,1.845,274,2.23,275,1.845,276,2.23,277,2.856,278,1.345,279,1.345,280,0.96,281,1.113,282,1.345,283,1.345,284,1.345,285,1.345,286,1.345,287,1.345,288,2.23,289,1.345,290,1.113]],["title/classes/CreateTaskDto.html",[21,0.05,291,1.547]],["body/classes/CreateTaskDto.html",[3,0.409,4,0.353,5,0.353,7,0.595,10,2.076,11,0.035,12,1.183,15,2.219,16,0.53,20,0.409,21,0.074,26,0.027,27,0.027,69,1.315,84,1.436,85,1.183,223,2.86,291,2.295,292,4.432,293,2.492,294,2.076,295,2.838,296,4.184,297,2.889,298,3.491,299,3.369,300,3.491,301,3.491,302,2.86,303,1.959]],["title/injectables/JwtStrategy.html",[61,0.871,194,1.72]],["body/injectables/JwtStrategy.html",[3,0.369,4,0.318,5,0.318,7,0.537,8,1.6,11,0.036,12,0.994,14,1.186,16,0.729,17,0.737,20,0.369,21,0.051,24,1.304,26,0.025,27,0.025,61,1.206,62,1.59,75,2.425,83,1.437,84,0.895,85,0.737,86,1.437,91,1.767,160,2.248,175,2.671,189,1.98,194,2.383,201,3.022,202,2.605,209,2.605,214,3.429,238,1.59,260,2.605,268,1.767,304,3.975,305,2.605,306,4.245,307,4.245,308,3.148,309,4.245,310,3.148,311,3.148,312,3.148,313,2.605,314,3.148,315,3.148,316,3.148,317,3.148,318,3.148,319,3.148,320,3.148,321,3.148,322,3.148]],["title/classes/LoginDto.html",[21,0.05,80,1.399]],["body/classes/LoginDto.html",[3,0.357,4,0.308,5,0.308,7,0.52,10,1.897,11,0.035,12,0.972,15,2.424,16,0.463,20,0.553,21,0.082,26,0.024,27,0.024,69,1.149,80,1.897,84,1.18,85,0.972,93,1.392,98,1.392,238,2.562,270,1.918,271,1.918,294,1.897,299,3.526,302,3.192,303,1.711,323,2.972,324,1.918,325,3.622,326,2.523,327,3.048,328,3.048,329,3.048,330,3.373,331,3.911,332,2.176,333,2.176,334,2.176,335,2.176,336,2.176]],["title/modules/PrismaModule.html",[28,1.155,41,1.399]],["body/modules/PrismaModule.html",[3,0.414,4,0.358,5,0.358,11,0.035,16,0.696,17,0.828,20,0.414,21,0.057,26,0.027,27,0.027,28,1.917,30,1.616,31,1.616,32,1.986,33,1.986,34,1.616,35,2.856,36,2.856,41,2.656,43,2.575,44,1.986,45,1.986,216,2.78,337,2.928,338,2.928,339,2.928,340,3.539,341,3.539]],["title/injectables/PrismaService.html",[61,0.871,216,1.399]],["body/injectables/PrismaService.html",[3,0.376,4,0.325,5,0.325,7,0.548,8,1.622,11,0.036,12,1.007,14,1.622,16,0.653,17,0.752,20,0.376,21,0.052,26,0.025,27,0.025,61,1.223,62,1.623,75,2.869,83,1.467,84,0.913,85,0.752,86,1.467,135,2.416,175,2.708,216,1.965,342,2.294,343,4.854,344,4.305,345,5.563,346,4.305,347,5.184,348,3.214,349,2.66,350,3.214,351,2.66,352,2.294,353,2.66,354,3.214,355,3.214,356,3.214,357,3.214]],["title/classes/RegisterDto.html",[21,0.05,93,1.399]],["body/classes/RegisterDto.html",[3,0.342,4,0.295,5,0.295,7,0.498,10,2.11,11,0.036,12,1.081,15,2.428,16,0.443,20,0.541,21,0.081,26,0.024,27,0.024,69,1.101,80,1.334,84,1.416,85,1.081,93,1.842,98,1.334,238,2.516,270,1.838,271,1.838,294,1.842,299,3.486,302,3.135,303,1.64,323,3.135,324,1.838,325,3.558,326,2.417,330,3.299,331,3.86,332,2.086,333,2.086,334,2.086,335,2.086,336,2.086,358,2.921,359,2.921,360,2.921,361,2.921,362,2.921]],["title/classes/Task.html",[21,0.05,363,1.928]],["body/classes/Task.html",[3,0.45,4,0.388,5,0.388,7,0.655,11,0.035,12,1.237,15,2.299,20,0.45,21,0.062,26,0.028,27,0.028,69,1.446,84,1.502,85,1.237,223,3.039,268,2.968,294,2.206,295,2.968,363,3.039,364,3.176,365,3.838,366,3.838,367,3.838]],["title/controllers/TasksController.html",[0,1.399,368,1.928]],["body/controllers/TasksController.html",[0,0.817,2,0.817,3,0.209,4,0.181,5,0.181,7,0.305,8,1.058,10,1.946,11,0.036,12,0.998,14,1.606,15,2.087,16,0.647,17,0.419,20,0.209,21,0.029,22,1.277,23,1.277,24,1.766,26,0.016,27,0.016,73,1.48,75,2.797,83,1.791,84,1.115,85,0.918,86,1.791,91,2.393,97,3.242,103,2.323,104,2.323,106,1.48,115,1.004,132,3.527,135,2.393,144,2.682,249,3.527,250,1.48,251,3.527,252,1.48,253,3.527,264,3.247,268,2.539,280,2.004,281,1.48,290,1.48,291,2.284,363,2.468,368,1.766,369,1.48,370,2.807,371,2.004,372,3.247,373,2.323,374,2.323,375,1.48,376,1.789,377,1.789,378,1.789,379,1.789,380,1.48,381,1.789,382,1.789,383,1.48,384,1.789,385,1.789,386,1.48,387,2.749,388,1.789,389,1.789,390,1.789,391,1.789,392,1.749,393,1.48,394,1.48,395,2.004,396,1.48,397,1.789,398,1.789,399,1.789,400,1.789,401,1.789,402,1.789,403,1.789,404,1.789,405,1.789,406,1.789,407,1.789,408,1.789,409,1.789,410,1.789,411,1.789,412,1.789]],["title/modules/TasksModule.html",[28,1.155,42,1.72]],["body/modules/TasksModule.html",[2,2.01,3,0.389,4,0.336,5,0.336,11,0.036,16,0.798,17,0.778,20,0.389,21,0.054,26,0.026,27,0.026,28,1.86,30,1.518,31,1.518,32,1.866,33,1.866,34,1.518,35,2.771,36,1.866,41,2.565,42,3.266,43,2.472,44,1.866,45,1.866,47,3.143,197,2.751,368,3.106,392,2.836,393,2.751,413,2.751,414,2.751,415,3.325,416,3.325,417,3.325]],["title/injectables/TasksService.html",[61,0.871,392,1.547]],["body/injectables/TasksService.html",[3,0.198,4,0.171,5,0.171,7,0.289,8,1.013,11,0.037,12,1.034,14,1.565,16,0.578,17,0.396,20,0.198,21,0.027,24,1.721,26,0.016,27,0.016,61,0.764,62,0.855,75,2.765,83,1.896,84,1.316,85,0.972,86,1.896,90,2.767,91,2.331,97,2.612,135,2.331,144,1.066,161,3.534,167,2.395,168,2.137,184,1.066,214,1.92,215,1.402,216,1.738,219,2.225,223,3.114,232,1.402,235,2.225,238,0.855,268,2.956,269,2.225,272,1.402,273,1.402,275,3.15,280,1.92,291,2.232,295,0.951,296,3.436,371,1.92,372,3.15,373,2.225,374,2.225,375,2.225,380,2.225,383,2.225,386,2.225,387,2.698,392,1.358,394,1.402,395,1.92,396,1.402,418,1.402,419,1.694,420,1.694,421,1.694,422,1.694,423,1.694,424,1.694,425,1.694,426,1.694,427,1.694,428,1.694,429,4.152,430,1.694,431,1.694,432,3.344,433,1.694,434,3.807,435,3.344,436,3.344,437,1.694,438,1.694]],["title/classes/UpdateProfileDto.html",[21,0.05,98,1.399]],["body/classes/UpdateProfileDto.html",[3,0.342,4,0.295,5,0.295,7,0.498,10,2.11,11,0.036,12,1.081,15,2.428,16,0.443,20,0.541,21,0.081,26,0.024,27,0.024,69,1.101,80,1.334,84,1.416,85,1.081,93,1.334,98,1.842,238,2.037,270,2.907,271,2.907,294,1.842,297,3.824,299,3.486,302,3.135,303,1.64,323,3.135,324,1.838,325,2.88,330,3.299,331,3.86,332,2.086,333,2.086,334,2.086,335,2.086,336,2.086,439,2.921,440,2.921,441,2.921]],["title/classes/UpdateTaskDto.html",[21,0.05,387,1.72]],["body/classes/UpdateTaskDto.html",[3,0.483,4,0.417,5,0.417,11,0.035,16,0.767,20,0.483,21,0.067,26,0.03,27,0.03,69,1.555,175,3.179,291,2.083,293,2.946,371,2.946,387,2.836,395,2.946,442,3.415,443,5.053,444,4.126,445,3.415,446,3.415]],["title/coverage.html",[447,2.976]],["body/coverage.html",[0,2.033,1,1.714,5,0.275,6,2.255,11,0.036,18,1.376,21,0.09,26,0.023,27,0.023,34,1.244,61,1.448,63,2.255,68,1.714,70,2.255,71,1.714,72,2.255,80,1.244,85,0.638,93,1.244,98,1.244,111,1.376,115,1.53,168,1.53,174,2.255,194,1.53,213,2.255,216,1.244,291,1.376,292,2.255,293,2.744,304,2.255,305,2.255,323,2.8,324,2.8,342,2.744,352,1.945,363,1.714,364,2.255,368,1.714,369,2.255,387,1.53,392,1.376,418,2.255,442,2.255,447,1.945,448,2.725,449,2.725,450,2.725,451,6.049,452,3.843,453,2.725,454,4.835,455,3.843,456,4.835,457,4.835,458,2.255,459,2.725,460,2.725,461,2.725,462,2.725,463,2.725]],["title/dependencies.html",[31,1.681,464,2.123]],["body/dependencies.html",[11,0.037,17,0.836,21,0.075,26,0.027,27,0.027,31,1.631,53,2.955,54,2.955,118,2.955,119,2.955,189,2.247,200,2.55,201,2.247,233,2.955,303,2.005,313,3.818,351,2.955,445,2.955,446,2.955,465,5.111,466,3.571,467,3.571,468,3.571,469,3.571,470,3.571,471,3.571,472,3.571,473,3.571,474,3.571,475,3.571,476,3.571,477,3.571,478,3.571,479,3.571,480,3.571,481,3.571,482,3.571,483,3.571]],["title/miscellaneous/functions.html",[484,1.614,485,3.047]],["body/miscellaneous/functions.html",[7,0.783,11,0.032,26,0.032,27,0.032,34,2.611,458,3.802,484,2.89,485,3.802,486,4.594]],["title/index.html",[7,0.438,487,2.566,488,2.566]],["body/index.html",[4,0.306,11,0.036,26,0.024,27,0.024,55,2.503,295,1.698,349,2.503,447,2.159,489,3.025,490,3.025,491,4.131,492,3.025,493,3.025,494,3.025,495,3.025,496,3.025,497,3.025,498,4.705,499,3.025,500,3.025,501,3.025,502,3.025,503,4.705,504,5.594,505,3.025,506,3.025,507,5.465,508,3.025,509,3.025,510,4.131,511,3.025,512,3.025,513,3.025,514,3.025,515,4.131,516,4.131,517,3.025,518,3.025,519,3.025,520,4.131,521,4.131,522,3.025,523,3.025,524,3.025,525,3.025,526,3.025,527,2.503,528,3.025,529,3.025,530,3.025,531,3.025,532,3.025,533,3.025,534,3.025,535,3.025,536,3.025,537,2.503,538,3.025,539,3.025,540,3.025,541,3.025,542,3.025,543,3.025,544,2.503]],["title/modules.html",[30,1.903]],["body/modules.html",[11,0.03,26,0.03,27,0.03,29,2.682,30,1.947,40,2.393,41,1.947,42,2.393,527,4.763,545,5.756,546,5.756,547,5.756]],["title/overview.html",[548,3.45]],["body/overview.html",[2,1.386,11,0.035,18,2.381,26,0.024,27,0.024,28,1.144,29,3.678,30,1.386,31,1.386,32,1.704,33,1.704,34,1.386,35,1.704,36,1.704,37,2.513,38,2.513,39,2.513,40,3.245,41,2.602,42,3.143,43,2.325,44,1.704,45,1.704,62,1.533,69,1.144,111,2.381,191,2.513,193,2.513,194,2.647,216,2.557,337,2.513,338,2.513,339,2.513,392,2.381,413,2.513,414,2.513,548,2.513,549,3.036,550,3.036,551,3.036,552,3.036]],["title/properties.html",[294,1.681,464,2.123]],["body/properties.html",[11,0.036,26,0.031,27,0.031,294,2.061,295,2.533,537,3.735,544,3.735,553,4.513,554,4.513,555,4.513]],["title/miscellaneous/variables.html",[484,1.614,556,3.047]],["body/miscellaneous/variables.html",[7,0.774,11,0.033,26,0.031,27,0.031,85,1.062,342,3.241,352,3.82,353,3.757,484,2.856,556,3.757,557,4.54]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":554,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":476,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":475,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":477,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":457,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":452,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":454,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":456,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":453,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":455,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":465,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":468,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":467,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["12",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["1d",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{}}}],["1e9",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["2",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["200",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TasksController.html":{}}}],["201",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TasksController.html":{}}}],["2mb",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["3",{"_index":550,"title":{},"body":{"overview.html":{}}}],["4",{"_index":549,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":469,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["404",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["5",{"_index":551,"title":{},"body":{"overview.html":{}}}],["5.0.2",{"_index":472,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":473,"title":{},"body":{"dependencies.html":{}}}],["5.16.1",{"_index":470,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":552,"title":{},"body":{"overview.html":{}}}],["address",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{}}}],["allowedfiletypes",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["allowedfiletypes.test(ext",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["already",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["amazing",{"_index":528,"title":{},"body":{"index.html":{}}}],["app",{"_index":349,"title":{},"body":{"injectables/PrismaService.html":{},"index.html":{}}}],["app.close",{"_index":357,"title":{},"body":{"injectables/PrismaService.html":{}}}],["app.controller",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":497,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["auth",{"_index":68,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"coverage.html":{}}}],["auth.controller",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.service",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":71,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":115,"title":{"classes/AuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["authguardpassport",{"_index":188,"title":{},"body":{"classes/AuthGuard.html":{}}}],["authguardpassport('jwt",{"_index":176,"title":{},"body":{"classes/AuthGuard.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":537,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":111,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["avatar",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{}}}],["await",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/PrismaService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["backers",{"_index":529,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception('file",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["badrequestexception('invalid",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["bcrypt",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["bcrypt.compare(data.password",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(data.password",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["beforeexit",{"_index":352,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/TasksModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":547,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":545,"title":{},"body":{"modules.html":{}}}],["building",{"_index":492,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":177,"title":{},"body":{"classes/AuthGuard.html":{}}}],["canactivate(context",{"_index":179,"title":{},"body":{"classes/AuthGuard.html":{}}}],["catch",{"_index":435,"title":{},"body":{"injectables/TasksService.html":{}}}],["cb",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{}}}],["cb(new",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["cb(null",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["checkpassword",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["checkuserexist",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{}}}],["class",{"_index":21,"title":{"classes/Auth.html":{},"classes/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/Task.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTaskDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":69,"title":{},"body":{"classes/Auth.html":{},"classes/AuthGuard.html":{},"classes/CreateTaskDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/Task.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTaskDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_prismamodule",{"_index":337,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_exports",{"_index":338,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_prismamodule_providers",{"_index":339,"title":{},"body":{"modules/PrismaModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":413,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_imports",{"_index":415,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_tasksmodule_providers",{"_index":414,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["const",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["constructor",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{}}}],["constructor(prisma",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["context",{"_index":182,"title":{},"body":{"classes/AuthGuard.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TasksController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('tasks",{"_index":398,"title":{},"body":{"controllers/TasksController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["coverage",{"_index":447,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":371,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{}}}],["create(@body",{"_index":399,"title":{},"body":{"controllers/TasksController.html":{}}}],["create(createtaskdto",{"_index":375,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["created",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TasksController.html":{}}}],["created_at",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["createtaskdto",{"_index":291,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["createtaskdto.user_id",{"_index":428,"title":{},"body":{"injectables/TasksService.html":{}}}],["createuser",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["data",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["data.avatar",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.email",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.password",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["date.now",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/CreateTaskDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"controllers/TasksController.html":{},"classes/UpdateProfileDto.html":{}}}],["defaultstrategy",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateProfileDto.html":{}}}],["delete",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TasksController.html":{}}}],["delete(':id",{"_index":409,"title":{},"body":{"controllers/TasksController.html":{}}}],["deleted",{"_index":412,"title":{},"body":{"controllers/TasksController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/TasksModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":295,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/Task.html":{},"injectables/TasksService.html":{},"index.html":{},"properties.html":{}}}],["destination",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["details",{"_index":405,"title":{},"body":{"controllers/TasksController.html":{}}}],["development",{"_index":506,"title":{},"body":{"index.html":{}}}],["diskstorage",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["documentation",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto.ts",{"_index":324,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["dto.ts:14",{"_index":360,"title":{},"body":{"classes/RegisterDto.html":{}}}],["dto.ts:18",{"_index":358,"title":{},"body":{"classes/RegisterDto.html":{}}}],["dto.ts:24",{"_index":362,"title":{},"body":{"classes/RegisterDto.html":{}}}],["dto.ts:30",{"_index":327,"title":{},"body":{"classes/LoginDto.html":{}}}],["dto.ts:34",{"_index":329,"title":{},"body":{"classes/LoginDto.html":{}}}],["dto.ts:40",{"_index":441,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["dto.ts:44",{"_index":439,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["dto.ts:48",{"_index":440,"title":{},"body":{"classes/UpdateProfileDto.html":{}}}],["dto/create",{"_index":394,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dto/register",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":396,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["e2e",{"_index":517,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":493,"title":{},"body":{"index.html":{}}}],["email",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/TasksService.html":{},"classes/UpdateProfileDto.html":{}}}],["enableshutdownhooks",{"_index":344,"title":{},"body":{"injectables/PrismaService.html":{}}}],["enableshutdownhooks(app",{"_index":346,"title":{},"body":{"injectables/PrismaService.html":{}}}],["err",{"_index":186,"title":{},"body":{"classes/AuthGuard.html":{}}}],["error",{"_index":436,"title":{},"body":{"injectables/TasksService.html":{}}}],["example",{"_index":503,"title":{},"body":{"index.html":{}}}],["executioncontext",{"_index":180,"title":{},"body":{"classes/AuthGuard.html":{}}}],["exist",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["expired",{"_index":321,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expiresin",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTaskDto.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["express",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["ext",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["extends",{"_index":175,"title":{},"body":{"classes/AuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"classes/UpdateTaskDto.html":{}}}],["extname",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["extname(file.originalname",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["extname(file.originalname).tolowercase",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["extractjwt",{"_index":312,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":316,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failed",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["false",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["file.filename",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["filefilter",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["fileinterceptor",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["fileinterceptor('file",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["filename",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{}}}],["findall",{"_index":372,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["findone",{"_index":373,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["findone(@param('id",{"_index":403,"title":{},"body":{"controllers/TasksController.html":{}}}],["findone(id",{"_index":380,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["found",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["framework",{"_index":491,"title":{},"body":{"index.html":{}}}],["fs",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["fs.existssync(path",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["fs.unlinksync(path",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["function",{"_index":459,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":485,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":402,"title":{},"body":{"controllers/TasksController.html":{}}}],["get('profile",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":487,"title":{"index.html":{}},"body":{}}],["grow",{"_index":524,"title":{},"body":{"index.html":{}}}],["handlerequest",{"_index":178,"title":{},"body":{"classes/AuthGuard.html":{}}}],["handlerequest(err",{"_index":183,"title":{},"body":{"classes/AuthGuard.html":{}}}],["hello",{"_index":65,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":534,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(200",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(201",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpexception",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('login",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('no",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('profile",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception('user",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["https://nestjs.com",{"_index":541,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.found",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["id",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["identifier",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":317,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":354,"title":{},"body":{"injectables/PrismaService.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTaskDto.html":{}}}],["imports",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateProfileDto.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["inestapplication",{"_index":347,"title":{},"body":{"injectables/PrismaService.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTaskDto.html":{}}}],["inject",{"_index":425,"title":{},"body":{"injectables/TasksService.html":{}}}],["inject('request",{"_index":427,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectable",{"_index":61,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/TasksService.html":{}},"body":{"injectables/AppService.html":{},"classes/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["injectables",{"_index":62,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["installation",{"_index":502,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":505,"title":{},"body":{"index.html":{}}}],["isemail",{"_index":330,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{}}}],["isemail()@isnotempty",{"_index":326,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isnotempty",{"_index":331,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{}}}],["isnotempty()@isstring",{"_index":328,"title":{},"body":{"classes/LoginDto.html":{}}}],["isnotempty()@isstring()@minlength(6)@maxlength(20",{"_index":361,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isoptional",{"_index":302,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{}}}],["isstring",{"_index":299,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{}}}],["isstring()@isoptional",{"_index":297,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateProfileDto.html":{}}}],["isstring()@minlength(3)@isnotempty",{"_index":359,"title":{},"body":{"classes/RegisterDto.html":{}}}],["join",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":315,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":194,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":538,"title":{},"body":{"index.html":{}}}],["large",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["length",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["license",{"_index":544,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":521,"title":{},"body":{"index.html":{}}}],["login",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@body",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(data",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(logindto",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":80,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["mantap",{"_index":67,"title":{},"body":{"injectables/AppService.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.round(math.random",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["max",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["maxlength",{"_index":332,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{}}}],["maxlength(20",{"_index":336,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{}}}],["message",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TasksController.html":{}}}],["metadata",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["minlength",{"_index":333,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{}}}],["minlength(3",{"_index":334,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{}}}],["minlength(6",{"_index":335,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{}}}],["miscellaneous",{"_index":484,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":520,"title":{},"body":{"index.html":{}}}],["mode",{"_index":510,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":533,"title":{},"body":{"index.html":{}}}],["multer",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["myśliwiec",{"_index":539,"title":{},"body":{"index.html":{}}}],["name",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateProfileDto.html":{}}}],["nest",{"_index":498,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":543,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":466,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":445,"title":{},"body":{"classes/UpdateTaskDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":189,"title":{},"body":{"classes/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["never",{"_index":353,"title":{},"body":{"injectables/PrismaService.html":{},"miscellaneous/variables.html":{}}}],["new",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["node.js",{"_index":490,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":426,"title":{},"body":{"injectables/TasksService.html":{}}}],["notfoundexception(`task",{"_index":434,"title":{},"body":{"injectables/TasksService.html":{}}}],["number",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/Task.html":{},"injectables/TasksService.html":{}}}],["old",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["onmoduleinit",{"_index":345,"title":{},"body":{"injectables/PrismaService.html":{}}}],["open",{"_index":522,"title":{},"body":{"index.html":{}}}],["optional",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["out",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["overview",{"_index":548,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":464,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":391,"title":{},"body":{"controllers/TasksController.html":{}}}],["parameters",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["partialtype",{"_index":444,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["partialtype(createtaskdto",{"_index":443,"title":{},"body":{"classes/UpdateTaskDto.html":{}}}],["passport",{"_index":313,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":311,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":306,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":325,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{}}}],["patch",{"_index":390,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch(':id",{"_index":406,"title":{},"body":{"controllers/TasksController.html":{}}}],["path",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["payload",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":320,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.exp",{"_index":322,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":319,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["please",{"_index":531,"title":{},"body":{"index.html":{}}}],["png|jpg|jpeg",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["post",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["post('login",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login')@httpcode(200",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register')@httpcode(201",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["prisma",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["prisma.service",{"_index":341,"title":{},"body":{"modules/PrismaModule.html":{}}}],["prisma/client",{"_index":351,"title":{},"body":{"injectables/PrismaService.html":{},"dependencies.html":{}}}],["prisma/prisma.module",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["prismaclient",{"_index":343,"title":{},"body":{"injectables/PrismaService.html":{}}}],["prismamodule",{"_index":41,"title":{"modules/PrismaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["prismaservice",{"_index":216,"title":{"injectables/PrismaService.html":{}},"body":{"injectables/AuthService.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["private",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["process.env.be_url}/uploads/profiles/${user.avatar",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["process.env.jwt_secret",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":512,"title":{},"body":{"index.html":{}}}],["profile",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["profile')@useinterceptors(undefined",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile(@req",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile(req",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["profile(userid",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["progressive",{"_index":489,"title":{},"body":{"index.html":{}}}],["project",{"_index":523,"title":{},"body":{"index.html":{}}}],["properties",{"_index":294,"title":{"properties.html":{}},"body":{"classes/CreateTaskDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/Task.html":{},"classes/UpdateProfileDto.html":{},"properties.html":{}}}],["property",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["public",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["public/uploads/profiles",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["public/uploads/profiles/${user.avatar",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["put",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["put('update",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["read",{"_index":532,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["reflect",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(@body",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(data",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["register(registerdto",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["registerdto",{"_index":93,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["remove",{"_index":374,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["remove(@param('id",{"_index":410,"title":{},"body":{"controllers/TasksController.html":{}}}],["remove(id",{"_index":383,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["repository",{"_index":501,"title":{},"body":{"index.html":{}}}],["req",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TasksService.html":{}}}],["req.headers['content",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PrismaService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["rootpath",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":507,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["scalable",{"_index":494,"title":{},"body":{"index.html":{}}}],["secret",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":318,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["select",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["server",{"_index":495,"title":{},"body":{"index.html":{}}}],["servestaticmodule",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["session",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{}}}],["side",{"_index":496,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{}}}],["size",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"modules/PrismaModule.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UpdateProfileDto.html":{},"classes/UpdateTaskDto.html":{},"index.html":{}}}],["sponsors",{"_index":526,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":486,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../prisma.service.ts",{"_index":557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":63,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":64,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:27",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:33",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:39",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:66",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard",{"_index":397,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/auth/auth.guard.ts",{"_index":174,"title":{},"body":{"classes/AuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:10",{"_index":181,"title":{},"body":{"classes/AuthGuard.html":{}}}],["src/auth/auth.guard.ts:14",{"_index":185,"title":{},"body":{"classes/AuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:14",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:37",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:59",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:88",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:9",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/register",{"_index":323,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":70,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/jwt",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":458,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/prisma/prisma.module",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"modules/TasksModule.html":{}}}],["src/prisma/prisma.module.ts",{"_index":340,"title":{},"body":{"modules/PrismaModule.html":{}}}],["src/prisma/prisma.service",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["src/prisma/prisma.service.ts",{"_index":342,"title":{},"body":{"injectables/PrismaService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/prisma/prisma.service.ts:12",{"_index":348,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/prisma/prisma.service.ts:8",{"_index":350,"title":{},"body":{"injectables/PrismaService.html":{}}}],["src/tasks/dto/create",{"_index":292,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["src/tasks/dto/update",{"_index":442,"title":{},"body":{"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["src/tasks/entities/task.entity.ts",{"_index":364,"title":{},"body":{"classes/Task.html":{},"coverage.html":{}}}],["src/tasks/entities/task.entity.ts:2",{"_index":366,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/entities/task.entity.ts:3",{"_index":367,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/entities/task.entity.ts:4",{"_index":365,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/tasks.controller.ts",{"_index":369,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["src/tasks/tasks.controller.ts:22",{"_index":377,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:34",{"_index":379,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:46",{"_index":382,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:58",{"_index":389,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:70",{"_index":385,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.module.ts",{"_index":416,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/tasks/tasks.service.ts",{"_index":418,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/tasks/tasks.service.ts:12",{"_index":420,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:17",{"_index":421,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:38",{"_index":422,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:53",{"_index":424,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:64",{"_index":423,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:7",{"_index":419,"title":{},"body":{"injectables/TasksService.html":{}}}],["start",{"_index":508,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":511,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":513,"title":{},"body":{"index.html":{}}}],["started",{"_index":488,"title":{"index.html":{}},"body":{}}],["starter",{"_index":500,"title":{},"body":{"index.html":{}}}],["statements",{"_index":450,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["statuscode",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TasksController.html":{}}}],["stay",{"_index":535,"title":{},"body":{"index.html":{}}}],["storage",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["strategy",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["strategy.ts",{"_index":305,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["strategy.ts:15",{"_index":310,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strategy.ts:6",{"_index":308,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/CreateTaskDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"classes/UpdateProfileDto.html":{}}}],["sub",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["successfully",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TasksController.html":{}}}],["super",{"_index":314,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":190,"title":{},"body":{"classes/AuthGuard.html":{}}}],["support",{"_index":527,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":546,"title":{},"body":{"modules.html":{}}}],["table",{"_index":463,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":462,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":363,"title":{"classes/Task.html":{}},"body":{"classes/Task.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["task.dto",{"_index":395,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{}}}],["task.dto.ts",{"_index":293,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["task.dto.ts:11",{"_index":301,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:5",{"_index":300,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:9",{"_index":298,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["tasks",{"_index":370,"title":{},"body":{"controllers/TasksController.html":{}}}],["tasks.controller",{"_index":417,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":393,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["tasks/tasks.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["taskscontroller",{"_index":368,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["tasksmodule",{"_index":42,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":392,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":516,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":519,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":518,"title":{},"body":{"index.html":{}}}],["tests",{"_index":515,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":525,"title":{},"body":{"index.html":{}}}],["this.$connect",{"_index":355,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.$on(beforeexit",{"_index":356,"title":{},"body":{"injectables/PrismaService.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(logindto",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.profile(req.user.id",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registerdto",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.updateprofile(req.user.id",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwt.signasync(payload",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.tasks.create",{"_index":430,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.prisma.tasks.delete",{"_index":438,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.prisma.tasks.findmany",{"_index":431,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.prisma.tasks.findunique",{"_index":433,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.prisma.tasks.update",{"_index":437,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.prisma.users.create",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.users.findfirst",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.users.findunique",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.prisma.users.update",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.req.user.id",{"_index":429,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasksservice.create(createtaskdto",{"_index":400,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.findall",{"_index":401,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.findone(+id",{"_index":404,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.remove(+id",{"_index":411,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.update(+id",{"_index":408,"title":{},"body":{"controllers/TasksController.html":{}}}],["throw",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["token",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":536,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":474,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["try",{"_index":432,"title":{},"body":{"injectables/TasksService.html":{}}}],["twitter",{"_index":542,"title":{},"body":{"index.html":{}}}],["type",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthGuard.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"injectables/JwtStrategy.html":{},"classes/LoginDto.html":{},"injectables/PrismaService.html":{},"classes/RegisterDto.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":446,"title":{},"body":{"classes/UpdateTaskDto.html":{},"dependencies.html":{}}}],["types/bcrypt",{"_index":471,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":499,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":187,"title":{},"body":{"classes/AuthGuard.html":{}}}],["uniquesuffix",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["uniquesuffix}${ext",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["unit",{"_index":514,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["unlicensed",{"_index":555,"title":{},"body":{"properties.html":{}}}],["update",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["update(@param('id",{"_index":407,"title":{},"body":{"controllers/TasksController.html":{}}}],["update(id",{"_index":386,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updated",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TasksController.html":{}}}],["updated_at",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["updateprofile",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["updateprofile(req",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{}}}],["updateprofile(userid",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["updateprofiledto",{"_index":98,"title":{"classes/UpdateProfileDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{},"coverage.html":{}}}],["updatetaskdto",{"_index":387,"title":{"classes/UpdateTaskDto.html":{}},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UpdateTaskDto.html":{},"coverage.html":{}}}],["updateuser",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["uploadedfile",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["useguards(authguard",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["useguards(authguard)@delete(':id",{"_index":384,"title":{},"body":{"controllers/TasksController.html":{}}}],["useguards(authguard)@get",{"_index":378,"title":{},"body":{"controllers/TasksController.html":{}}}],["useguards(authguard)@get(':id",{"_index":381,"title":{},"body":{"controllers/TasksController.html":{}}}],["useguards(authguard)@get('profile",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(authguard)@patch(':id",{"_index":388,"title":{},"body":{"controllers/TasksController.html":{}}}],["useguards(authguard)@post",{"_index":376,"title":{},"body":{"controllers/TasksController.html":{}}}],["useguards(authguard)@put('update",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":184,"title":{},"body":{"classes/AuthGuard.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/TasksService.html":{}}}],["user.avatar",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.email",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.id",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["user_id",{"_index":296,"title":{},"body":{"classes/CreateTaskDto.html":{},"injectables/TasksService.html":{}}}],["userid",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["validate",{"_index":307,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":309,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":303,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateProfileDto.html":{},"dependencies.html":{}}}],["variable",{"_index":460,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":556,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":553,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":509,"title":{},"body":{"index.html":{}}}],["website",{"_index":540,"title":{},"body":{"index.html":{}}}],["world",{"_index":66,"title":{},"body":{"injectables/AppService.html":{}}}],["yarn",{"_index":504,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":530,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PrismaModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PrismaModule\n                        \n                        \n                            TasksModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { PrismaModule } from './prisma/prisma.module';\nimport { TasksModule } from './tasks/tasks.module';\nimport { AuthModule } from './auth/auth.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\n\n@Module({\n  imports: [\n    PrismaModule,\n    TasksModule,\n    AuthModule,\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'public'),\n    }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World mantap!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                    Async\n                                profile\n                            \n                            \n                                    \n                                    \n                                register\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(loginDto: LoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('login')@HttpCode(200)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                loginDto\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                        \n                    profile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerDto: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')@HttpCode(201)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerDto\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(req, data: UpdateProfileDto, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Put('update-profile')@UseInterceptors(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            UpdateProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Post,\n  Body,\n  HttpCode,\n  Get,\n  UseGuards,\n  Req,\n  UploadedFile,\n  UseInterceptors,\n  Put,\n  BadRequestException,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { LoginDto, RegisterDto, UpdateProfileDto } from './dto/register-dto';\nimport { AuthGuard } from './auth.guard';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { diskStorage } from 'multer';\nimport { extname } from 'path';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Post('register')\n  @HttpCode(201)\n  register(@Body() registerDto: RegisterDto) {\n    return this.authService.register(registerDto);\n  }\n\n  @Post('login')\n  @HttpCode(200)\n  login(@Body() loginDto: LoginDto) {\n    return this.authService.login(loginDto);\n  }\n\n  @UseGuards(AuthGuard)\n  @Get('profile')\n  async profile(@Req() req) {\n    return await this.authService.profile(req.user.id);\n  }\n\n  @UseGuards(AuthGuard)\n  @Put('update-profile')\n  @UseInterceptors(\n    FileInterceptor('file', {\n      storage: diskStorage({\n        destination: 'public/uploads/profiles',\n        filename: (req, file, cb) => {\n          const uniqueSuffix =\n            Date.now() + '-' + Math.round(Math.random() * 1e9);\n          const ext = extname(file.originalname);\n          cb(null, `${uniqueSuffix}${ext}`);\n        },\n      }),\n      fileFilter: (req, file, cb) => {\n        const allowedFileTypes = /png|jpg|jpeg/;\n        const ext = extname(file.originalname).toLowerCase();\n        if (!allowedFileTypes.test(ext)) {\n          return cb(new BadRequestException('Invalid file type'), false);\n        }\n        cb(null, true);\n      },\n    }),\n  )\n  async updateProfile(\n    @Req() req,\n    @Body() data: UpdateProfileDto,\n    @UploadedFile()\n    file: Express.Multer.File,\n  ) {\n    const size = req.headers['content-length'] / 1024 / 1024;\n    if (size > 2) {\n      throw new BadRequestException('File size is too large, max 2mb');\n    }\n\n    return await this.authService.updateProfile(req.user.id, data, file);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthGuard.html":{"url":"classes/AuthGuard.html","title":"class - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuardPassport('jwt')\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExecutionContext,\n  // Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\n\nimport { AuthGuard as AuthGuardPassport } from '@nestjs/passport';\n\nexport class AuthGuard extends AuthGuardPassport('jwt') {\n  canActivate(context: ExecutionContext) {\n    return super.canActivate(context);\n  }\n\n  handleRequest(err, user) {\n    if (err || !user) {\n      throw err || new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtStrategy } from './jwt-strategy';\n\n@Module({\n  imports: [\n    PrismaModule,\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n      property: 'user',\n      session: false,\n    }),\n    JwtModule.register({\n      secret: process.env.JWT_SECRET,\n      signOptions: { expiresIn: '1d' },\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                profile\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                updateProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, jwt: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwt\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(data: LoginDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            LoginDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        profile\n                        \n                    \n                \n            \n            \n                \n                        \n                    profile(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(data: RegisterDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            RegisterDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateProfile(userId: number, data: UpdateProfileDto, file)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            UpdateProfileDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { LoginDto, RegisterDto, UpdateProfileDto } from './dto/register-dto';\nimport { PrismaService } from 'src/prisma/prisma.service';\nimport * as bcrypt from 'bcrypt';\nimport { JwtService } from '@nestjs/jwt';\nimport * as fs from 'fs';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private prisma: PrismaService,\n    private jwt: JwtService,\n  ) {}\n  async register(data: RegisterDto) {\n    const checkUserExist = await this.prisma.users.findUnique({\n      where: { email: data.email },\n    });\n\n    if (checkUserExist) {\n      throw new HttpException('User already exist', HttpStatus.FOUND);\n    }\n\n    data.password = await bcrypt.hash(data.password, 12);\n\n    const createUser = await this.prisma.users.create({\n      data: data,\n    });\n\n    if (createUser) {\n      return {\n        statusCode: 201,\n        message: 'User created successfully',\n      };\n    }\n  }\n\n  async login(data: LoginDto) {\n    const user = await this.prisma.users.findUnique({\n      where: { email: data.email },\n    });\n\n    if (!user) {\n      throw new HttpException('Login failed', 400);\n    }\n\n    const checkPassword = await bcrypt.compare(data.password, user.password);\n    if (!checkPassword) {\n      throw new HttpException('Login failed', 400);\n    }\n\n    const payload = { sub: user.id, email: user.email };\n    return {\n      statusCode: 200,\n      token: await this.jwt.signAsync(payload),\n      message: 'Login successfully',\n    };\n  }\n\n  async profile(userId: number) {\n    const user = await this.prisma.users.findFirst({\n      where: { id: userId },\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        address: true,\n        avatar: true,\n        created_at: true,\n        updated_at: true,\n      },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile not found', 404);\n    }\n\n    if (user.avatar) {\n      user.avatar = `${process.env.BE_URL}/uploads/profiles/${user.avatar}`;\n    }\n\n    return {\n      message: 'Get profile successfully',\n      statusCode: 200,\n      data: user,\n    };\n  }\n\n  async updateProfile(userId: number, data: UpdateProfileDto, file) {\n    if (!file && !data) {\n      throw new HttpException('No data to update', 400);\n    }\n\n    const user = await this.prisma.users.findFirst({\n      where: { id: userId },\n    });\n\n    if (!user) {\n      throw new HttpException('Profile not found', 404);\n    }\n\n    if (user.avatar && file) {\n      // delete old avatar\n      const path = `./public/uploads/profiles/${user.avatar}`;\n      if (fs.existsSync(path)) {\n        fs.unlinkSync(path);\n      }\n    }\n\n    if (file) {\n      data.avatar = file.filename;\n    }\n\n    const updateUser = await this.prisma.users.update({\n      where: { id: userId },\n      data: data,\n      select: {\n        id: true,\n        name: true,\n        email: true,\n        address: true,\n        avatar: true,\n        created_at: true,\n        updated_at: true,\n      },\n    });\n    return {\n      message: 'Profile updated successfully',\n      statusCode: 200,\n      data: updateUser,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/create-task.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                description\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                user_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/create-task.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/create-task.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/tasks/dto/create-task.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from 'class-validator';\n\nexport class CreateTaskDto {\n  @IsString()\n  name: string;\n\n  @IsString()\n  @IsOptional()\n  description: string;\n\n  user_id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, 'jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-strategy.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt-strategy.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, 'jwt') {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: any) {\n    return {\n      id: payload.sub,\n      email: payload.email,\n      expired: payload.exp,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class RegisterDto {\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  name: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  @MaxLength(20)\n  password: string;\n}\n\nexport class LoginDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\nexport class UpdateProfileDto {\n  @IsString()\n  @IsOptional()\n  name: string;\n\n  @IsString()\n  @IsOptional()\n  address: string;\n\n  @IsString()\n  @IsOptional()\n  avatar: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PrismaModule.html":{"url":"modules/PrismaModule.html","title":"module - PrismaModule","body":"\n                   \n\n\n\n\n    Modules\n    PrismaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\n\nPrismaService \n\nPrismaService \n\n\n\nPrismaModule\n\nPrismaModule\n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/prisma/prisma.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PrismaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PrismaService } from './prisma.service';\n\n@Module({\n  providers: [PrismaService],\n  exports: [PrismaService],\n})\nexport class PrismaModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PrismaService.html":{"url":"injectables/PrismaService.html","title":"injectable - PrismaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PrismaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/prisma/prisma.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PrismaClient\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                enableShutdownHooks\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        enableShutdownHooks\n                        \n                    \n                \n            \n            \n                \n                        \n                    enableShutdownHooks(app: INestApplication)\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                app\n                                            \n                                                        INestApplication\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/prisma/prisma.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { INestApplication, Injectable, OnModuleInit } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\n\nlet beforeExit: never;\n\n@Injectable()\nexport class PrismaService extends PrismaClient implements OnModuleInit {\n  async onModuleInit() {\n    await this.$connect();\n  }\n\n  async enableShutdownHooks(app: INestApplication) {\n    this.$on(beforeExit, async () => {\n      await app.close();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(3)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(6)@MaxLength(20)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class RegisterDto {\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  name: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  @MaxLength(20)\n  password: string;\n}\n\nexport class LoginDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\nexport class UpdateProfileDto {\n  @IsString()\n  @IsOptional()\n  name: string;\n\n  @IsString()\n  @IsOptional()\n  address: string;\n\n  @IsString()\n  @IsOptional()\n  avatar: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/entities/task.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task.entity.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task.entity.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/tasks/entities/task.entity.ts:3\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Task {\n  id: number;\n  name: string;\n  description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findAll\n                            \n                            \n                                    \n                                    \n                                    Async\n                                findOne\n                            \n                            \n                                    \n                                    \n                                    Async\n                                remove\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTaskDto: CreateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTaskDto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get()\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.controller.ts:70\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTaskDto: UpdateTaskDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(AuthGuard)@Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/tasks/tasks.controller.ts:58\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTaskDto\n                                            \n                                                            UpdateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n} from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { AuthGuard } from 'src/auth/auth.guard';\n\n@Controller('tasks')\nexport class TasksController {\n  constructor(private readonly tasksService: TasksService) {}\n\n  @UseGuards(AuthGuard)\n  @Post()\n  async create(@Body() createTaskDto: CreateTaskDto) {\n    const data = await this.tasksService.create(createTaskDto);\n\n    return {\n      message: 'Task created successfully',\n      data,\n      statusCode: 201,\n    };\n  }\n\n  @UseGuards(AuthGuard)\n  @Get()\n  async findAll() {\n    const data = await this.tasksService.findAll();\n\n    return {\n      message: 'Get all tasks successfully',\n      data,\n      statusCode: 200,\n    };\n  }\n\n  @UseGuards(AuthGuard)\n  @Get(':id')\n  async findOne(@Param('id') id: string) {\n    const data = await this.tasksService.findOne(+id);\n\n    return {\n      message: 'Get details task successfully',\n      data,\n      statusCode: 200,\n    };\n  }\n\n  @UseGuards(AuthGuard)\n  @Patch(':id')\n  async update(@Param('id') id: string, @Body() updateTaskDto: UpdateTaskDto) {\n    const data = await this.tasksService.update(+id, updateTaskDto);\n\n    return {\n      message: 'Task updated successfully',\n      data,\n      statusCode: 200,\n    };\n  }\n\n  @UseGuards(AuthGuard)\n  @Delete(':id')\n  async remove(@Param('id') id: string) {\n    const data = await this.tasksService.remove(+id);\n\n    return {\n      message: 'Task deleted successfully',\n      data,\n      statusCode: 200,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\ncluster_TasksModule_imports\n\n\n\n\nPrismaModule\n\nPrismaModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nPrismaModule->TasksModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            PrismaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { TasksController } from './tasks.controller';\nimport { PrismaModule } from 'src/prisma/prisma.module';\n\n@Module({\n  imports: [PrismaModule],\n  controllers: [TasksController],\n  providers: [TasksService],\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(prisma: PrismaService, req: any)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/tasks.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        prisma\n                                                  \n                                                        \n                                                                        PrismaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        req\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTaskDto: CreateTaskDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTaskDto\n                                            \n                                                            CreateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: number, updateTaskDto: UpdateTaskDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tasks/tasks.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTaskDto\n                                            \n                                                            UpdateTaskDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, NotFoundException } from '@nestjs/common';\nimport { CreateTaskDto } from './dto/create-task.dto';\nimport { UpdateTaskDto } from './dto/update-task.dto';\nimport { PrismaService } from 'src/prisma/prisma.service';\n\n@Injectable()\nexport class TasksService {\n  constructor(\n    private prisma: PrismaService,\n    @Inject('REQUEST') private req: any,\n  ) {}\n  async create(createTaskDto: CreateTaskDto) {\n    createTaskDto.user_id = this.req.user.id;\n    return await this.prisma.tasks.create({ data: createTaskDto });\n  }\n\n  async findAll() {\n    return await this.prisma.tasks.findMany({\n      where: { user_id: this.req.user.id },\n      select: {\n        id: true,\n        name: true,\n        description: true,\n        created_at: true,\n        updated_at: true,\n        user_id: true,\n        user: {\n          select: {\n            id: true,\n            name: true,\n            email: true,\n          },\n        },\n      },\n    });\n  }\n\n  async findOne(id: number) {\n    try {\n      const data = await this.prisma.tasks.findUnique({\n        where: { id, user_id: this.req.user.id },\n      });\n      if (!data) {\n        throw new NotFoundException(`Task ID not found`);\n      }\n\n      return data;\n    } catch (error) {\n      throw new NotFoundException(`Task ID not found`);\n    }\n  }\n\n  async update(id: number, updateTaskDto: UpdateTaskDto) {\n    try {\n      return await this.prisma.tasks.update({\n        where: { id, user_id: this.req.user.id },\n        data: updateTaskDto,\n      });\n    } catch (error) {\n      throw new NotFoundException(`Task ID not found`);\n    }\n  }\n\n  async remove(id: number) {\n    try {\n      return await this.prisma.tasks.delete({\n        where: { id, user_id: this.req.user.id },\n      });\n    } catch (error) {\n      throw new NotFoundException(`Task ID not found`);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateProfileDto.html":{"url":"classes/UpdateProfileDto.html","title":"class - UpdateProfileDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateProfileDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                address\n                            \n                            \n                                    \n                                    \n                                avatar\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-dto.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-dto.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class RegisterDto {\n  @IsString()\n  @MinLength(3)\n  @IsNotEmpty()\n  name: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  @MaxLength(20)\n  password: string;\n}\n\nexport class LoginDto {\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\nexport class UpdateProfileDto {\n  @IsString()\n  @IsOptional()\n  name: string;\n\n  @IsString()\n  @IsOptional()\n  address: string;\n\n  @IsString()\n  @IsOptional()\n  avatar: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTaskDto.html":{"url":"classes/UpdateTaskDto.html","title":"class - UpdateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/update-task.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateTaskDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateTaskDto } from './create-task.dto';\n\nexport class UpdateTaskDto extends PartialType(CreateTaskDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            class\n            AuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/dto/register-dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register-dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/dto/register-dto.ts\n            \n            class\n            UpdateProfileDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            injectable\n            PrismaService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/prisma/prisma.service.ts\n            \n            variable\n            beforeExit\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/dto/create-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/dto/update-task.dto.ts\n            \n            class\n            UpdateTaskDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/entities/task.entity.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/serve-static : ^4.0.2\n        \n            @prisma/client : ^5.16.1\n        \n            @types/bcrypt : ^5.0.2\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PrismaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PrismaModule\n\n\n\ncluster_PrismaModule_exports\n\n\n\ncluster_PrismaModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPrismaModule\n\nPrismaModule\n\nAuthModule -->\n\nPrismaModule->AuthModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nPrismaModule->TasksModule\n\n\n\nAppModule -->\n\nPrismaModule->AppModule\n\n\n\n\n\nPrismaService \n\nPrismaService \n\nPrismaService  -->\n\nPrismaModule->PrismaService \n\n\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPrismaService\n\nPrismaService\n\nPrismaModule -->\n\nPrismaService->PrismaModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            beforeExit   (src/.../prisma.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/prisma/prisma.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        beforeExit\n                        \n                    \n                \n            \n                \n                    \n                        Type :     never\n\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
